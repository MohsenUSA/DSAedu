name: Test DSA Learning Adventure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-setuptools
        # Install SDL dependencies for pygame
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
        # Install display server for headless testing
        sudo apt-get install -y xvfb

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pygame
        # Install testing dependencies
        pip install pytest pytest-cov

    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Test game imports and basic functionality
      run: |
        # Set display for headless testing on Linux
        if [ "$RUNNER_OS" == "Linux" ]; then
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
        fi
        python test_game.py
      shell: bash

    - name: Test individual components
      run: |
        # Set display for headless testing on Linux
        if [ "$RUNNER_OS" == "Linux" ]; then
          export DISPLAY=:99
        fi
        python -c "
import pygame
pygame.init()
print('Testing imports...')
import dsa_game
import levels
print('Testing level creation...')
for i in range(1, 5):
    level = levels.get_level_instance(i)
    print(f'Level {i}: {level.__class__.__name__} - OK')
print('All tests passed!')
"
      shell: bash

    - name: Check code quality
      run: |
        # Check for common issues
        python -m py_compile dsa_game.py
        python -m py_compile levels.py
        python -m py_compile test_game.py
        echo "Code compilation successful!"
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security checks
      run: |
        # Check for security issues
        bandit -r . -f json -o bandit-report.json || true
        # Check for known security vulnerabilities in dependencies
        safety check --json --output safety-report.json || true
      continue-on-error: true

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Check documentation
      run: |
        # Check that all documentation files exist
        files=("README.md" "DOCUMENTATION.md" "API_REFERENCE.md" "CONTRIBUTING.md" "CHANGELOG.md" "LICENSE")
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing documentation file: $file"
            exit 1
          else
            echo "âœ“ $file exists"
          fi
        done
        echo "All documentation files present!"
    
    - name: Check links in README
      run: |
        # Basic check for broken internal links
        grep -o '\[.*\](.*\.md)' README.md | while read link; do
          file=$(echo "$link" | sed 's/.*](\(.*\))/\1/')
          if [ ! -f "$file" ]; then
            echo "Broken link in README: $file"
            exit 1
          fi
        done
        echo "README links check passed!"
      continue-on-error: true
